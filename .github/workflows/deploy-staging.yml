name: Deploy to Staging

on:
  push:
    branches: [ development ]
  workflow_dispatch:


jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

    - name: Add staging server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory on staging server
      run: |
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          mkdir -p ~/ev-booking-staging
        '

    - name: Copy all project files to staging server
      run: |
        # Copy entire project to server for local building
        rsync -avz --exclude='.git' \
                   --exclude='node_modules' \
                   --exclude='target' \
                   --exclude='build' \
                   ./ ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:~/ev-booking-staging/

    - name: Create environment file on staging server
      run: |
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          cd ~/ev-booking-staging
          cat > .env.staging << EOF
          POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}
          DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
          REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.STAGING_JWT_SECRET_KEY }}
          MAIL_USERNAME=${{ secrets.STAGING_MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.STAGING_MAIL_PASSWORD }}
          STRIPE_PUBLIC_KEY_STAGING=${{ secrets.STAGING_STRIPE_PUBLIC_KEY }}
          STRIPE_SECRET_KEY_STAGING=${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          CORS_ALLOWED_ORIGINS=${{ secrets.STAGING_CORS_ALLOWED_ORIGINS }}
          WEBHOOK_URL=${{ secrets.STAGING_WEBHOOK_URL }}
          EOF
        '

    - name: Deploy to staging
      run: |
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          cd ~/ev-booking-staging
          chmod +x deploy-staging.sh
          ./deploy-staging.sh
        '

    - name: Run health checks
      run: |
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          echo "Waiting for application to start..."
          sleep 30

          # Health check with retry
          for i in {1..10}; do
            if curl -f http://localhost:8081/api/actuator/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check failed, attempt $i/10"
              sleep 10
            fi
          done

          # Final health check
          curl -f http://localhost:8081/api/actuator/health || exit 1
        '

    - name: Run smoke tests
      run: |
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          # Test API endpoints
          echo "Running smoke tests..."

          # Test health endpoint
          curl -f http://localhost:8081/api/actuator/health

          # Test info endpoint
          curl -f http://localhost:8081/api/actuator/info

          # Test swagger endpoint
          curl -f http://localhost:8081/api/swagger-ui.html

          echo "Smoke tests passed!"
        '

    - name: Cleanup old images
      run: |
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          # Remove old Docker images to save space
          docker image prune -a -f --filter "until=72h"
        '


  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js for API tests
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Newman (Postman CLI)
      run: npm install -g newman

    - name: Run API tests
      run: |
        # Run Postman collection against staging
        newman run tests/postman/ev-booking-api.postman_collection.json \
          -e tests/postman/staging.postman_environment.json \
          --reporters cli,json \
          --reporter-json-export staging-test-results.json

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: staging-api-test-results
        path: staging-test-results.json